# -*- coding: utf-8 -*-
"""Banco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iJ6-kxGFDPJ_jF1YBzxe_tv8RSKbO8fp
"""

from cryptography.fernet import Fernet
import os

carregarChave = "chave.key"


def Chave():
    if os.path.exists(carregarChave):
        return open(carregarChave, "rb").read()
    chave = Fernet.generate_key()
    with open(carregarChave, "wb") as f:
        f.write(chave)
    return chave


def criptografar(texto: str, chave: bytes) -> bytes:
    return Fernet(chave).encrypt(texto.encode())


def descriptografar(token: bytes, chave: bytes) -> str:
    return Fernet(chave).decrypt(token).decode()


class Conta:
    def __init__(self, numero_cartao, cpf, senha, chave, saldo_inicial=0.0):
        self.cartao_criptografado = criptografar(numero_cartao, chave)
        self.cpf = cpf
        self.senha = senha
        self.saldo = float(saldo_inicial)

    def visualizar_cartao(self, chave):
        return descriptografar(self.cartao_criptografado, chave)


def depositar(conta: Conta, valor: float):
    if valor <= 0:
        print("O valor do depósito deve ser positivo.")
        return
    conta.saldo += valor
    print(f"Depósito realizado! \nNovo saldo: R${conta.saldo:.2f}")


def sacar(conta: Conta, valor: float):
    if valor <= 0:
        print("O valor do saque deve ser positivo.")
        return
    if valor > conta.saldo:
        print("Saldo insuficiente.")
        return
    conta.saldo -= valor
    print(f"Saque realizado! \nNovo saldo: R${conta.saldo:.2f}")


if __name__ == "__main__":
    chave = Chave()

    conta = Conta(
        numero_cartao="5590678899004050",
        cpf="12345678900",
        senha="1245",
        chave=chave,
        saldo_inicial=500.0
    )

    print("\n==== SISTEMA BANCÁRIO ====\n")
    ultimosDigitos = input("Digite os 4 últimos dígitos do seu cartão: ").strip()

    numero = conta.visualizar_cartao(chave)
    if ultimosDigitos != numero[-4:]:
        print("Dígitos incorretos! Acesso negado.")
        exit(0)

    cpf = input("Confirme seu CPF: ").strip()
    senha = input("Digite sua senha: ").strip()

    if cpf != conta.cpf or senha != conta.senha:
        print("CPF ou senha incorretos! Acesso negado.")
        exit(0)

    print("\n==== Identidade confirmada com sucesso! ====")
    print("\n==== Bem-vindo à sua conta! =====")
    print("Escolha uma opção:")
    print("[1] Depositar \n[2] Sacar \n[3] Visualizar Cartão \n[4] Sair")

    while True:
        comando = input("\nDigite sua opção: ").strip()

        match comando:
            case "1":
                valor_str = input("Valor do depósito: ").strip().replace(",", ".")
                if valor_str.replace(".", "", 1).isdigit():
                    valor = float(valor_str)
                    depositar(conta, valor)
                else:
                    print("Valor inválido. Digite apenas números.")

            case "2":
                valor_str = input("Valor do saque: ").strip().replace(",", ".")
                if valor_str.replace(".", "", 1).isdigit():
                    valor = float(valor_str)
                    sacar(conta, valor)
                else:
                    print("Valor inválido. Digite apenas números.")

            case "3":
                print("Número do cartão:", conta.visualizar_cartao(chave))

            case "4":
                print("\n==== Encerrando o sistema. ====\n")
                break

            case _:
                print("Comando não encontrado!!\nTente novamente e escolha uma das opções do Menu.")